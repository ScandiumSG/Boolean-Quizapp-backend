// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using quizapp_backend.Database;

#nullable disable

namespace quizapp_backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240322084149_order")]
    partial class order
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("quizapp_backend.Models.AnswerOptionModels.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answer_options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "4"
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "3"
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "Paris"
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "London"
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = true,
                            QuestionId = 3,
                            Text = "George Washington"
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Thomas Jefferson"
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = true,
                            QuestionId = 4,
                            Text = "1945"
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "1918"
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = true,
                            QuestionId = 5,
                            Text = "H2O"
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "CO2"
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = true,
                            QuestionId = 6,
                            Text = "Photosynthesis"
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "Respiration"
                        },
                        new
                        {
                            Id = 13,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Red"
                        },
                        new
                        {
                            Id = 14,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Green"
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "White"
                        },
                        new
                        {
                            Id = 16,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Blue"
                        },
                        new
                        {
                            Id = 17,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Yellow"
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Black"
                        },
                        new
                        {
                            Id = 19,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "Red"
                        },
                        new
                        {
                            Id = 20,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "Green"
                        },
                        new
                        {
                            Id = 21,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "White"
                        },
                        new
                        {
                            Id = 22,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "Blue"
                        },
                        new
                        {
                            Id = 23,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "Yellow"
                        },
                        new
                        {
                            Id = 24,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "Black"
                        },
                        new
                        {
                            Id = 25,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "Pink"
                        },
                        new
                        {
                            Id = 26,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Red"
                        },
                        new
                        {
                            Id = 27,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Green"
                        },
                        new
                        {
                            Id = 28,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "White"
                        },
                        new
                        {
                            Id = 29,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Blue"
                        },
                        new
                        {
                            Id = 30,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Yellow"
                        },
                        new
                        {
                            Id = 31,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Black"
                        },
                        new
                        {
                            Id = 32,
                            IsCorrect = true,
                            QuestionId = 10,
                            Text = "Poland"
                        },
                        new
                        {
                            Id = 33,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "France"
                        },
                        new
                        {
                            Id = 34,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "Italy"
                        },
                        new
                        {
                            Id = 35,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "Germany"
                        },
                        new
                        {
                            Id = 36,
                            IsCorrect = true,
                            QuestionId = 12,
                            Text = "Flour, water, yeast, salt"
                        },
                        new
                        {
                            Id = 37,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "Milk, eggs, sugar, flour"
                        },
                        new
                        {
                            Id = 38,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "Butter, sugar, flour, baking powder"
                        },
                        new
                        {
                            Id = 39,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "Cornmeal, water, yeast, salt"
                        },
                        new
                        {
                            Id = 40,
                            IsCorrect = true,
                            QuestionId = 11,
                            Text = "Cream cheese"
                        },
                        new
                        {
                            Id = 41,
                            IsCorrect = true,
                            QuestionId = 11,
                            Text = "Smoked salmon"
                        },
                        new
                        {
                            Id = 42,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "Tomato"
                        },
                        new
                        {
                            Id = 43,
                            IsCorrect = true,
                            QuestionId = 11,
                            Text = "Avocado"
                        },
                        new
                        {
                            Id = 44,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "Peanut butter"
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionModels.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer")
                        .HasColumnName("quiz_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Order = 0,
                            QuizId = 1,
                            Text = "What is 2 + 2?"
                        },
                        new
                        {
                            Id = 2,
                            Order = 1,
                            QuizId = 1,
                            Text = "What is the capital of France?"
                        },
                        new
                        {
                            Id = 3,
                            Order = 0,
                            QuizId = 2,
                            Text = "Who was the first president of the United States?"
                        },
                        new
                        {
                            Id = 4,
                            Order = 1,
                            QuizId = 2,
                            Text = "In which year did World War II end?"
                        },
                        new
                        {
                            Id = 5,
                            Order = 0,
                            QuizId = 3,
                            Text = "What is the chemical symbol for water?"
                        },
                        new
                        {
                            Id = 6,
                            Order = 1,
                            QuizId = 3,
                            Text = "What is the process by which plants make their own food?"
                        },
                        new
                        {
                            Id = 7,
                            Order = 0,
                            QuizId = 5,
                            Text = "France"
                        },
                        new
                        {
                            Id = 8,
                            Order = 1,
                            QuizId = 5,
                            Text = "Singapore"
                        },
                        new
                        {
                            Id = 9,
                            Order = 2,
                            QuizId = 5,
                            Text = "Senegal"
                        },
                        new
                        {
                            Id = 10,
                            Order = 0,
                            QuizId = 6,
                            Text = "Where did bagels originate from?"
                        },
                        new
                        {
                            Id = 11,
                            Order = 1,
                            QuizId = 6,
                            Text = "Which of the following are traditional toppings for a bagel?"
                        },
                        new
                        {
                            Id = 12,
                            Order = 2,
                            QuizId = 6,
                            Text = "What are the main ingredients of a bagel?"
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionUserAnswerModels.UserAnswer", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_option_id");

                    b.HasKey("UserId", "AnswerOptionId");

                    b.HasIndex("AnswerOptionId");

                    b.ToTable("user_answers");

                    b.HasData(
                        new
                        {
                            UserId = "feeba6b7-7f8d-4d8b-93ec-b7ff49552ea6",
                            AnswerOptionId = 1
                        },
                        new
                        {
                            UserId = "feeba6b7-7f8d-4d8b-93ec-b7ff49552ea6",
                            AnswerOptionId = 3
                        },
                        new
                        {
                            UserId = "d709b64a-2b0d-489a-b979-b264fbd2301a",
                            AnswerOptionId = 5
                        },
                        new
                        {
                            UserId = "d709b64a-2b0d-489a-b979-b264fbd2301a",
                            AnswerOptionId = 7
                        },
                        new
                        {
                            UserId = "6db6382f-ca07-4d1e-9a75-4357b609f248",
                            AnswerOptionId = 9
                        },
                        new
                        {
                            UserId = "6db6382f-ca07-4d1e-9a75-4357b609f248",
                            AnswerOptionId = 11
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.QuizModels.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 3, 22, 8, 41, 49, 526, DateTimeKind.Utc).AddTicks(8860),
                            Description = "Test your math skills",
                            Title = "Math Quiz",
                            UserId = "feeba6b7-7f8d-4d8b-93ec-b7ff49552ea6"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 3, 21, 8, 41, 49, 526, DateTimeKind.Utc).AddTicks(8860),
                            Description = "Test your knowledge of history",
                            Title = "History Quiz",
                            UserId = "d709b64a-2b0d-489a-b979-b264fbd2301a"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 3, 20, 8, 41, 49, 526, DateTimeKind.Utc).AddTicks(8860),
                            Description = "Test your understanding of science concepts",
                            Title = "Science Quiz",
                            UserId = "6db6382f-ca07-4d1e-9a75-4357b609f248"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 3, 19, 8, 41, 49, 526, DateTimeKind.Utc).AddTicks(8860),
                            Description = "What colors are present in various countries' flags?",
                            Title = "Country flag colors",
                            UserId = "220420f1-3bd8-4e83-a731-766981c092ca"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2024, 3, 18, 8, 41, 49, 526, DateTimeKind.Utc).AddTicks(8860),
                            Description = "Test your knowledge about bagels",
                            Title = "Bagel Quiz",
                            UserId = "feeba6b7-7f8d-4d8b-93ec-b7ff49552ea6"
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.ScoreModels.Attempt", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer")
                        .HasColumnName("quiz_id");

                    b.Property<int>("Correct")
                        .HasColumnType("integer")
                        .HasColumnName("correct");

                    b.Property<int>("HighestPossibleScore")
                        .HasColumnType("integer")
                        .HasColumnName("highest_possible_score");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("Wrong")
                        .HasColumnType("integer")
                        .HasColumnName("wrong");

                    b.HasKey("UserId", "QuizId");

                    b.ToTable("attempt");
                });

            modelBuilder.Entity("quizapp_backend.Models.UserModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = "feeba6b7-7f8d-4d8b-93ec-b7ff49552ea6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "515799f3-ea0a-4f32-bda5-f82790d634d7",
                            Email = "bob@brainbox.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB@BRAINBOX.COM",
                            NormalizedUserName = "Bob",
                            PasswordHash = "AQAAAAIAAYagAAAAEK5y2Vps5wVgpPk0XrXdmdNJUVLxwYUZnDQ67Otx/4hfikJyL/JOaOFZ21kSsfkNyQ==",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Bob"
                        },
                        new
                        {
                            Id = "d709b64a-2b0d-489a-b979-b264fbd2301a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "737c0a55-5363-4a39-b8b1-deb250fb4eac",
                            Email = "bobswife@brainbox.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBSWIFE@BRAINBOX.COM",
                            NormalizedUserName = "BOBSWIFE",
                            PasswordHash = "AQAAAAIAAYagAAAAEI98nQmwB0Fy1cZSCa+kwcZoyXv2OzmxP7o0SuY8YmL7QMqwT9ftjzUmGKTK7FcWZw==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Bob's wife"
                        },
                        new
                        {
                            Id = "6db6382f-ca07-4d1e-9a75-4357b609f248",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5365e37b-f9f9-413d-8d07-bcf8ea207319",
                            Email = "bobsson@brainbox.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBSSON@BRAINBOX.COM",
                            NormalizedUserName = "BOBSSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEBAYSxutuQWyEv21SZzxyqBxfriX83ufpItokKiAq//Yl3Xic17UX819J5G7KQxawQ==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Bob's son"
                        },
                        new
                        {
                            Id = "220420f1-3bd8-4e83-a731-766981c092ca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79cdb143-a36d-482e-b88c-f06483310481",
                            Email = "stian.k.gaustad@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STIAN.K.GAUSTAD@GMAIL.COM",
                            NormalizedUserName = "SCANDIUMSG",
                            PasswordHash = "AQAAAAIAAYagAAAAEG60jTX3vgfdpsvOJjHGXfMsFaHuKf+J5PwnY5Lpn60aNSr+CX9i61QP7F+TJixQWw==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "ScandiumSG"
                        },
                        new
                        {
                            Id = "8389617c-5e8a-40b4-9131-ff6647aa6dde",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f10e68b-1bd6-4f8f-aaa7-bc6a652a2320",
                            Email = "tollov@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOLLOV@EMAIL.COM",
                            NormalizedUserName = "TOLLOV",
                            PasswordHash = "AQAAAAIAAYagAAAAELGctLgrXDWB11k6xmT0qQvXjW+4yYsHvrrQ7NyraBiTcKSIZi+LJseGFfWJ4CrXTg==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tollov"
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.AnswerOptionModels.AnswerOption", b =>
                {
                    b.HasOne("quizapp_backend.Models.QuestionModels.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionModels.Question", b =>
                {
                    b.HasOne("quizapp_backend.Models.QuizModels.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionUserAnswerModels.UserAnswer", b =>
                {
                    b.HasOne("quizapp_backend.Models.AnswerOptionModels.AnswerOption", "AnswerOption")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quizapp_backend.Models.UserModels.ApplicationUser", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuizModels.Quiz", b =>
                {
                    b.HasOne("quizapp_backend.Models.UserModels.ApplicationUser", "User")
                        .WithMany("Quizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("quizapp_backend.Models.AnswerOptionModels.AnswerOption", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionModels.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuizModels.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("quizapp_backend.Models.UserModels.ApplicationUser", b =>
                {
                    b.Navigation("Quizzes");

                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
