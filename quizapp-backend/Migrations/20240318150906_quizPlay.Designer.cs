// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using quizapp_backend.Database;

#nullable disable

namespace quizapp_backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240318150906_quizPlay")]
    partial class quizPlay
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("quizapp_backend.Models.AnswerOptionModels.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answer_options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "Answer 1"
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionModels.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer")
                        .HasColumnName("quiz_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Order = 0,
                            QuizId = 1,
                            Text = "Question 1"
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionUserAnswerModels.UserAnswer", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_answer_id");

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_option_id");

                    b.HasKey("QuestionId", "UserId");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex("UserId");

                    b.ToTable("user_answers");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            UserId = 1,
                            AnswerOptionId = 1
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.QuizModels.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This is quiz 1",
                            Title = "Quiz 1",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.UserModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("quizapp_backend.Models.AnswerOptionModels.AnswerOption", b =>
                {
                    b.HasOne("quizapp_backend.Models.QuestionModels.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionModels.Question", b =>
                {
                    b.HasOne("quizapp_backend.Models.QuizModels.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionUserAnswerModels.UserAnswer", b =>
                {
                    b.HasOne("quizapp_backend.Models.AnswerOptionModels.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quizapp_backend.Models.QuestionModels.Question", "Question")
                        .WithMany("QuestionUserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quizapp_backend.Models.UserModels.User", "User")
                        .WithMany("QuestionUserAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuizModels.Quiz", b =>
                {
                    b.HasOne("quizapp_backend.Models.UserModels.User", "User")
                        .WithMany("Quizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuestionModels.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("QuestionUserAnswers");
                });

            modelBuilder.Entity("quizapp_backend.Models.QuizModels.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("quizapp_backend.Models.UserModels.User", b =>
                {
                    b.Navigation("QuestionUserAnswers");

                    b.Navigation("Quizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
